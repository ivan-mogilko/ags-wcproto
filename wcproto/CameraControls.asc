//-----------------------------------------------------------------------------
//
// Default camera controls module.
// Handles player input and moves/rotates camera.
//
//-----------------------------------------------------------------------------

float speed = 0.0;
// TODO: find a way to remove this; we cannot keep accumulated roll,
// because we may have commands that change object direction momentarily!
float current_roll;
float last_roll_delta;

int CameraObject; // an index of space object this camera is attached to

float fire_delay;

export speed;


//Joystick* joy;

/*
bool IsPOVLeftDown(this Joystick *) {
  return this.POV & 8 != 0;
}
*/

// Synchronizes camera position and direction with the player's ship
void SyncCamera(int obj, float dt)
{
  cam_pos.x = SO_point[obj].x;
  cam_pos.y = SO_point[obj].y;
  cam_pos.z = SO_point[obj].z;
  cam_dir.x = SO_dir[obj].x;
  cam_dir.y = SO_dir[obj].y;
  cam_dir.z = SO_dir[obj].z;
  cam_up.x = SO_up[obj].x;
  cam_up.y = SO_up[obj].y;
  cam_up.z = SO_up[obj].z;
  cam_right.x = SO_right[obj].x;
  cam_right.y = SO_right[obj].y;
  cam_right.z = SO_right[obj].z;
  Camera3D.UpdateTransforms();
  
  // TODO: calculate camera_roll out of cam axes
  camera_roll += last_roll_delta * dt;
  if (camera_roll < 0.0) camera_roll += Maths.Pi * 2.0;
  if (camera_roll >= Maths.Pi * 2.0) camera_roll -= Maths.Pi * 2.0;
}

static void CameraControls::Init(int space_object) {
  mouse.SetPosition(SX, SY);
  mouse.Mode = eModePointer;
  //if (JoystickCount() > 0) joy = Joystick.Open(0);
  CameraObject = space_object;
  SyncCamera(CameraObject, 0.0);
}

static void CameraControls::HandleInput(float dt) {
  if (CameraObject < 0)
    return;
  
  float yaw = IntToFloat(mouse.x - SX) / IntToFloat(SX * 4);
  float pitch = IntToFloat(mouse.y - SY) / IntToFloat(SY * 4);
  float rollTarget = 0.2 * IntToFloat(IsKeyPressed(eKeyD) - IsKeyPressed(eKeyA));
  // TODO: I think this accumulates rolling control position, check again later
  current_roll += (rollTarget - current_roll) * 0.07;
  
  // adjust rotation speeds
  // TODO: need to solve the riddle of setting final angle to quaternion:
  // reducing yaw and pitch here breaks rotation if cursor is too close to the center
  yaw *= 1.0;
  pitch *= 1.0;
  float roll = -current_roll; // roll also need to be inverted
  
  // adjust to accomodate with delta-time (TODO: revisit this later)
  yaw *= 40.0;
  pitch *= 40.0;
  roll *= 4.0;
  
  last_roll_delta = roll;
  
  float speedTarget;
  speed += SPEED_STEP * IntToFloat(IsKeyPressed(eKeyW) - IsKeyPressed(eKeyS));
  if (speed < 0.0) speed = 0.0;
  if (speed > MAX_SPEED) speed = MAX_SPEED;
  
  /*
  if (joy != null) {
    yaw = IntToFloat(joy.x) / IntToFloat(JOY_RANGE * 5);
    pitch = IntToFloat(-joy.y) / IntToFloat(JOY_RANGE * 5);
  
    float lim = 0.06;
    if (abs(yaw) < lim) yaw = 0.0; else yaw -= sgn(yaw) * lim;
    if (abs(pitch) < lim) pitch = 0.0; else pitch -= sgn(pitch) * lim;
    
    roll = IntToFloat(joy.GetAxis(4)) / IntToFloat(JOY_RANGE * 4);
    if (abs(roll) < lim) roll = 0.0;
    
    speedTarget = IntToFloat(joy.GetAxis(2) > 10) * 500.0;
    speed += 10.0 * sgn(speedTarget - speed);
    
    lblDebug.Text = String.Format("%d", joy.IsPOVLeftDown());
  }
  */
  
  // Instant velocity shift
  SO_vel[CameraObject].SetXYZ(SO_dir[CameraObject].x, SO_dir[CameraObject].y, SO_dir[CameraObject].z);
  SO_vel[CameraObject].Scale(speed);
  // Assign rotation speed
  SO_angvel[CameraObject].SetXYZ(yaw, pitch, roll);
  // TODO: move this to Ship Controls module
  // TODO: support proper thrust mechanics with inertia (an option)
  
  
  
  // -------------------------------------------------------------
  // Other Ship controls
  // -------------------------------------------------------------
  if (fire_delay >= 0.0) fire_delay -= dt;
  if (Mouse.IsButtonDown(eMouseLeft)) {
    if (fire_delay < TINY_FLOAT) {
      SpaceSim.FireMissile(TYPE_TORPEDO, SO_point[CameraObject].x, SO_point[CameraObject].y, SO_point[CameraObject].z, 
        SO_dir[CameraObject].x * TORPEDO_SPEED + SO_vel[CameraObject].x,
        SO_dir[CameraObject].y * TORPEDO_SPEED + SO_vel[CameraObject].y,
        SO_dir[CameraObject].z * TORPEDO_SPEED + SO_vel[CameraObject].z);
      fire_delay = FIRE_DELAY;
    }
  }
}

static void CameraControls::Update(float dt) {
  if (CameraObject < 0)
    return;
  SyncCamera(CameraObject, dt);
}
