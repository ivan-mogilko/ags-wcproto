//-----------------------------------------------------------------------------
//
// Sample space flight simulation, originally written by Khris.
// Initially implemented in 640x360.
//
//-----------------------------------------------------------------------------

#define SPRITE_PLANET 2

int PlayerShip;

void constructWorld() {
  // Add a planet
  SpaceObjects.AddObject(0.0, 0.0, 500000.0, 10000.0, SPRITE_PLANET);
  // Add player's ship
  // make it invisible object at the center of coordinates
  PlayerShip = SpaceObjects.AddObject(0.0, 0.0, 0.0, 0.0, -1);
  
  // Spawn some space dust
  SpaceObjects.SetupSpaceDust(500, 20000, 10, 10, 32, 248);
}

void game_start() {
  
  Camera3D.Init();
  SpaceObjects.Init();
  
  constructWorld();
  
  CameraControls.Init(PlayerShip); // attach camera to player's ship
  
  SetGameSpeed(60); // 60 fps
  Debug(4, 1);
}

void handleInput() {
  CameraControls.HandleInput();
}

void updateWorld(float dt) {
  SpaceObjects.UpdateAll(dt);
}

void updateCamera(float dt) {
  CameraControls.Update(dt);
}

void drawScreen() {
  DrawingSurface *ds = Room.GetDrawingSurfaceForBackground();
  ds.Clear(0);
  
  /*
  ds.DrawingColor = 19;
  int s = POINTS_SIZE / 10;
  ds.DrawRectangle(SX - s, SY - s,  SX + s, SY + s);
  */
  
  SpaceObjects.DrawAll(ds);
  
  // top view of ship
  /*
  int x = SX + FloatToInt(cam_pos.x / 10.0);
  int y = SY - FloatToInt(cam_pos.z / 10.0);
  ds.DrawingColor = 63488;
  ds.DrawPixel(x, y);
  x += FloatToInt(cam_dir.x * 10.0);
  y -= FloatToInt(cam_dir.z * 10.0);
  ds.DrawPixel(x, y);
  */
  
  //
  // Cockpit
  //
  // crosshair
  ds.DrawingColor = 31;
  int chs = 6;
  ds.DrawLine(SX - chs, SY, SX + chs, SY);
  ds.DrawLine(SX, SY - chs, SX, SY + chs);
  // cockpit sprite
  //ds.DrawImage(0, 0, 3);
  // speed meter
  int sp = FloatToInt(speed * 255.0 / MAX_SPEED, eRoundDown);
  if (sp < 0) sp = 0;
  if (sp > 255) sp = 255;
  ds.DrawingColor = Game.GetColorFromRGB(255 - sp, sp, 0);
  ds.DrawRectangle(240, SY*2 - 40, 245, SY*2 - 40 - (sp * 3) / 10);
  
  ds.Release();
}

void repeatedly_execute() {
  // TODO: implement sync with DeltaTime every second (because AGS has 1 second precision sadly)
  // TODO: implement FPS - dependent/independent option
  float delta_time = 1.0 / IntToFloat(GetGameSpeed());
  
  handleInput();
  updateWorld(delta_time);
  updateCamera(delta_time);
  drawScreen();
}
