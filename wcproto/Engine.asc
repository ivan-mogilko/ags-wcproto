//-----------------------------------------------------------------------------
//
// Sample space flight simulation, originally written by Khris.
// Initially implemented in 640x360.
//
//-----------------------------------------------------------------------------
#define SPRITE_PLANET 2


Vec4 cam_pos, cam_dir, cam_up, cam_right;
float speed = 15.0;

Matrix persp;
Matrix view, viewProj, tmp;

#define POINTS 500
#define POINTS_SIZE 20000
#define focalLength 600.0

Vec4 point[POINTS];

int SX, SY;

//Joystick* joy;

float rnd(int lim) {
  return IntToFloat(Random(lim * 2) - lim);
}

void game_start() {
   
  SX = System.ViewportWidth / 2;
  SY = System.ViewportHeight / 2;
  
  mouse.SetPosition(SX, SY);
  mouse.Mode = eModePointer;

  Debug(4, 1);

  persp.Perspective(focalLength, 1.0, 0.1, 10000.0);

  cam_pos.SetXYZW(0.0, 0.0, -20000.0, 1.0);
  cam_right.SetXYZW(1.0, 0.0, 0.0, 0.0);
  cam_up.SetXYZW(0.0, 1.0, 0.0, 0.0);
  cam_dir.SetXYZW(0.0, 0.0, 1.0, 0.0);
  
  for (int i = 0; i < POINTS; i++) {
    point[i].SetXYZW(rnd(POINTS_SIZE), rnd(POINTS_SIZE), rnd(POINTS_SIZE), 1.0);
  }
  
  view.Identity();
  
  //if (JoystickCount() > 0) joy = Joystick.Open(0);
}

float yaw = 0.0, pitch = 0.0, roll = 0.0;
float totalRoll = 0.0;

Vec4 rot;
Matrix rotToRot, IrotToRot, ypRot; 
Vec4 tm;

float abs(float n) {
  if (n < 0.0) return -n;
  return n;
}

float sgn(float n) {
  if (abs(n) < 0.00001) return 0.0;
  return n / abs(n);
}

void updateCamera() {
  
  float f = 1.0; // rotation circle - speed - factor
  
  /*
  yaw = 0.0;
  pitch = 0.3;
  */
  
  float sp = speed * IntToFloat(speed > 0.0) + 1.0 * IntToFloat(speed == 0.0);
  
  float ys = 0.0;
  if (yaw != 0.0) ys = sp * f / yaw;
  float ps = 0.0;
  if (pitch != 0.0) ps = sp * f / pitch;
  
  // calculate rotation axis based on yaw and pitch
  rot.SetXYZW(
    cam_right.x * ys + cam_up.x * ps,
    cam_right.y * ys + cam_up.y * ps,
    cam_right.z * ys + cam_up.z * ps,
    0.0
  );
  float l = rot.Length(); // this length determines the radius of the circle and therefore the rotation angle
  if (l != 0.0) {
    rot.Normalize();
    float s = sgn(yaw * pitch);
    float a = Maths.Sqrt(yaw * yaw + pitch * pitch);
    if (s != 0.0) a *= s;
    else {
      if (yaw != 0.0) {
        rot.Set(cam_up.Get());
        a *= sgn(yaw);
      }
      if (pitch != 0.0) {
        rot.Set(cam_right.Get());
        a *= sgn(pitch);
      }
    }
    tmp.Quaternion(a / 10.0, rot.x, rot.y, rot.z);
    cam_dir.Set(tmp.NewMultiplyV(cam_dir.Get()));
    cam_up.Set(tmp.NewMultiplyV(cam_up.Get()));
    cam_right.Set(tmp.NewMultiplyV(cam_right.Get()));
  }
  if (roll != 0.0) {
    totalRoll += roll / -5.0;
    if (totalRoll < 0.0) totalRoll += Maths.Pi * 2.0;
    if (totalRoll >= Maths.Pi * 2.0) totalRoll -= Maths.Pi * 2.0;
    tmp.Quaternion(roll / -5.0, cam_dir.x, cam_dir.y, cam_dir.z);
    cam_up.Set(tmp.NewMultiplyV(cam_up.Get()));
    cam_right.Set(tmp.NewMultiplyV(cam_right.Get()));    
  }
  
  // lblDebug.Text = String.Format("yaw: %.2f, pitch: %.2f", yaw, pitch);
  
  // move camera forward
  cam_pos.x += cam_dir.x * speed;
  cam_pos.y += cam_dir.y * speed;
  cam_pos.z += cam_dir.z * speed;

  view.Translate(-cam_pos.x, -cam_pos.y, -cam_pos.z);
  tmp.CreateFromUnity(cam_right.Get(), cam_up.Get(), cam_dir.Get());
  tmp.InverseRot();
  view.Set(tmp.NewMultiplyM(view.Get()));
  viewProj.Set(persp.NewMultiplyM(view.Get()));
}

/*
bool IsPOVLeftDown(this Joystick *) {
  return this.POV & 8 != 0;
}
*/

void handleInput() {
  
  
  yaw = IntToFloat(mouse.x - SX) / IntToFloat(SX * 4);
  pitch = IntToFloat(mouse.y - SY) / IntToFloat(SY * 4);
   
  float rollTarget = 0.2 * IntToFloat(IsKeyPressed(eKeyD) - IsKeyPressed(eKeyA));
  roll += (rollTarget - roll) * 0.07;
  
  float speedTarget;
  speed += 10.0 * IntToFloat(IsKeyPressed(eKeyW) - IsKeyPressed(eKeyS));
  if (speed < 0.0) speed = 0.0;
  if (speed > 500.0) speed = 500.0;
  
  /*
  if (joy != null) {
    yaw = IntToFloat(joy.x) / IntToFloat(JOY_RANGE * 5);
    pitch = IntToFloat(-joy.y) / IntToFloat(JOY_RANGE * 5);
  
    float lim = 0.06;
    if (abs(yaw) < lim) yaw = 0.0; else yaw -= sgn(yaw) * lim;
    if (abs(pitch) < lim) pitch = 0.0; else pitch -= sgn(pitch) * lim;
    
    roll = IntToFloat(joy.GetAxis(4)) / IntToFloat(JOY_RANGE * 4);
    if (abs(roll) < lim) roll = 0.0;
    
    speedTarget = IntToFloat(joy.GetAxis(2) > 10) * 500.0;
    speed += 10.0 * sgn(speedTarget - speed);
    
    lblDebug.Text = String.Format("%d", joy.IsPOVLeftDown());
  }
  */
}

DrawingSurface* ds;

void updateWorld() {
}

// move point infront of ship
void movePoint(int i) {
  float x = rnd(POINTS_SIZE);
  float y = rnd(POINTS_SIZE);
  float z = rnd(POINTS_SIZE) + IntToFloat(POINTS_SIZE * 2);
  point[i].SetXYZ(
    cam_pos.x + cam_right.x * x + cam_up.x * y + cam_dir.x * z,
    cam_pos.y + cam_right.y * x + cam_up.y * y + cam_dir.y * z,
    cam_pos.z + cam_right.z * x + cam_up.y * y + cam_dir.z * z
  );
}

DynamicSprite* planet;

void drawScreen() {
  ds = Room.GetDrawingSurfaceForBackground();
  ds.Clear(0);
  
  /*
  ds.DrawingColor = 19;
  int s = POINTS_SIZE / 10;
  ds.DrawRectangle(SX - s, SY - s,  SX + s, SY + s);
  */
  
  point[POINTS - 1].z = 500000.0;
  
  // draw stuff
  Vec4 t;
  int co[];
  float size = 10.0;
  ds.DrawingColor = 31;
  for (int i = 0; i < POINTS; i++) {
    t.Set(viewProj.NewMultiplyV(point[i].Get()));
    if (t.w > 0.0) {
      co = t.Get2D();
      ds.DrawPixel(co[0], co[1]);
      if (i == POINTS - 1) {
        int si = FloatToInt(10000.0 * focalLength / t.w, eRoundNearest);
        if (si <= SX * 3) {
          int a = FloatToInt(Maths.RadiansToDegrees(totalRoll), eRoundNearest);
          if (a < 0) a += 360;
          planet = DynamicSprite.CreateFromExistingSprite(SPRITE_PLANET, true);
          planet.Resize(si * 2, si * 2);
          if (a > 0 && a < 360) planet.Rotate(a);
          si = planet.Width / 2;
          ds.DrawImage(co[0] - si, co[1] - si, planet.Graphic, 0);
        }
      }
      else {
        int rad = FloatToInt(focalLength * size / t.w, eRoundNearest);
        if (rad >= 1) ds.DrawCircle(co[0], co[1], rad);
        else ds.DrawPixel(co[0], co[1]);
      }
    }
    else if (i < POINTS - 1) movePoint(i);
  }
  
  ds.DrawingColor = 25;
  ds.DrawPixel(640, 360);
  
  // top view of ship
  /*
  int x = SX + FloatToInt(cam_pos.x / 10.0);
  int y = SY - FloatToInt(cam_pos.z / 10.0);
  ds.DrawingColor = 63488;
  ds.DrawPixel(x, y);
  x += FloatToInt(cam_dir.x * 10.0);
  y -= FloatToInt(cam_dir.z * 10.0);
  ds.DrawPixel(x, y);
  */
  
  ds.DrawingColor = 31;
  int chs = 6;
  ds.DrawLine(SX - chs, SY, SX + chs, SY);
  ds.DrawLine(SX, SY - chs, SX, SY + chs);
  
  //ds.DrawImage(0, 0, 3);
  
  int sp = FloatToInt(speed * 2.55 / 5.0, eRoundDown);
  if (sp < 0) sp = 0;
  if (sp > 255) sp = 255;
  ds.DrawingColor = Game.GetColorFromRGB(255 - sp, sp, 0);
  ds.DrawRectangle(240, SY*2 - 40, 245, SY*2 - 40 - (sp * 3) / 10);
  
  ds.Release();
}

void repeatedly_execute() {
  handleInput();
  updateWorld();
  updateCamera();
  drawScreen();
}
