//-----------------------------------------------------------------------------
//
// 3D camera module, based on initial code by Khris.
// Implementation is based on OpenGL tutorial:
// http://www.opengl-tutorial.org/beginners-tutorials/tutorial-3-matrices/
//
//-----------------------------------------------------------------------------

// Screen size
int SX, SY;
// Camera position and axes
Vec4 cam_pos, cam_dir, cam_up, cam_right;
// Projection matrix
Matrix persp;
// Model -> Screen transform matrixes
Matrix view, viewProj, tmp;

Vec4 rot;
float totalRoll;

// 3D -> 2D conversion result
int screenPos[2]; // x,y pos
int screenSize;   // 2D size
int screenRot;    // 2D angle in rads

// exports
export SX, SY;
export cam_pos, cam_dir, cam_up, cam_right, totalRoll;
export viewProj;
export screenPos, screenSize, screenRot;


static void Camera3D::Init()
{
  SX = System.ViewportWidth / 2;
  SY = System.ViewportHeight / 2;

  persp.Perspective(focalLength, 1.0, 0.1, 10000.0);

  cam_pos.SetXYZW(0.0, 0.0, -20000.0, 1.0);
  cam_right.SetXYZW(1.0, 0.0, 0.0, 0.0);
  cam_up.SetXYZW(0.0, 1.0, 0.0, 0.0);
  cam_dir.SetXYZW(0.0, 0.0, 1.0, 0.0);
  
  view.Identity();
}

// TODO: move camera motion (speed, move, rotate) out to camera controls module
static void Camera3D::Update(float speed, float yaw, float pitch, float roll)
{
  float f = 1.0; // rotation circle - speed - factor
  /*
  yaw = 0.0;
  pitch = 0.3;
  */
  
  float sp = speed * IntToFloat(speed > 0.0) + 1.0 * IntToFloat(speed == 0.0);
  
  float ys = 0.0;
  if (yaw != 0.0) ys = sp * f / yaw;
  float ps = 0.0;
  if (pitch != 0.0) ps = sp * f / pitch;
  
  // calculate rotation axis based on yaw and pitch
  rot.SetXYZW(
    cam_right.x * ys + cam_up.x * ps,
    cam_right.y * ys + cam_up.y * ps,
    cam_right.z * ys + cam_up.z * ps,
    0.0
  );
  float l = rot.Length(); // this length determines the radius of the circle and therefore the rotation angle
  if (l != 0.0) {
    rot.Normalize();
    float s = sgn(yaw * pitch);
    float a = Maths.Sqrt(yaw * yaw + pitch * pitch);
    if (s != 0.0) a *= s;
    else {
      if (yaw != 0.0) {
        rot.Set(cam_up.Get());
        a *= sgn(yaw);
      }
      if (pitch != 0.0) {
        rot.Set(cam_right.Get());
        a *= sgn(pitch);
      }
    }
    tmp.Quaternion(a / 10.0, rot.x, rot.y, rot.z);
    cam_dir.Set(tmp.NewMultiplyV(cam_dir.Get()));
    cam_up.Set(tmp.NewMultiplyV(cam_up.Get()));
    cam_right.Set(tmp.NewMultiplyV(cam_right.Get()));
  }
  if (roll != 0.0) {
    totalRoll += roll / -5.0;
    if (totalRoll < 0.0) totalRoll += Maths.Pi * 2.0;
    if (totalRoll >= Maths.Pi * 2.0) totalRoll -= Maths.Pi * 2.0;
    tmp.Quaternion(roll / -5.0, cam_dir.x, cam_dir.y, cam_dir.z);
    cam_up.Set(tmp.NewMultiplyV(cam_up.Get()));
    cam_right.Set(tmp.NewMultiplyV(cam_right.Get()));    
  }
  
  // lblDebug.Text = String.Format("yaw: %.2f, pitch: %.2f", yaw, pitch);
  
  // move camera forward
  cam_pos.x += cam_dir.x * speed;
  cam_pos.y += cam_dir.y * speed;
  cam_pos.z += cam_dir.z * speed;

  view.Translate(-cam_pos.x, -cam_pos.y, -cam_pos.z);
  tmp.CreateFromUnity(cam_right.Get(), cam_up.Get(), cam_dir.Get());
  tmp.InverseRot();
  view.Set(tmp.NewMultiplyM(view.Get()));
  viewProj.Set(persp.NewMultiplyM(view.Get()));
}

static bool Camera3D::ToScreen(float pos[], float size) {
  Vec4 t;
  t.Set(viewProj.NewMultiplyV(pos));
  if (t.w <= 0.0)
    return false;
  int spos[] = t.Get2D();
  int ssize = FloatToInt(size * focalLength / t.w, eRoundNearest);
  int srot = FloatToInt(Maths.RadiansToDegrees(totalRoll), eRoundNearest);
  if (srot < 0) srot += 360;
  screenPos[0] = spos[0];
  screenPos[1] = spos[1];
  screenSize = ssize;
  screenRot = srot;
  return true;
}
