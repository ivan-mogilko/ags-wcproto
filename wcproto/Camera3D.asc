//-----------------------------------------------------------------------------
//
// 3D camera module, based on initial code by Khris.
// Implementation is based on OpenGL tutorial:
// http://www.opengl-tutorial.org/beginners-tutorials/tutorial-3-matrices/
//
//-----------------------------------------------------------------------------

// Screen size
int SX, SY;
// Camera position and axes
Vec4 cam_pos, cam_dir, cam_up, cam_right;
float camera_roll;
// Projection matrix
Matrix persp;
// Model -> Screen transform matrixes
Matrix view, viewProj;

// 3D -> 2D conversion result
TransformResult scr_pos;

// exports
export SX, SY;
export cam_pos, cam_dir, cam_up, cam_right, camera_roll;
export viewProj;
export scr_pos;


static void Camera3D::Init()
{
  SX = System.ViewportWidth / 2;
  SY = System.ViewportHeight / 2;

  persp.Perspective(focalLength, 1.0, 0.1, 10000.0);

  cam_pos.SetXYZW(0.0, 0.0, 0.0, 1.0);
  cam_dir.SetXYZW(0.0, 0.0, 1.0, 0.0);
  cam_up.SetXYZW(0.0, 1.0, 0.0, 0.0);
  cam_right.SetXYZW(1.0, 0.0, 0.0, 0.0);
  
  view.Identity();
}

static void Camera3D::UpdateTransforms() {
  Matrix tmp;
  view.Translate(-cam_pos.x, -cam_pos.y, -cam_pos.z);
  tmp.CreateFromUnity(cam_right.Get(), cam_up.Get(), cam_dir.Get());
  tmp.InverseRot();
  view.Set(tmp.NewMultiplyM(view.Get()));
  viewProj.Set(persp.NewMultiplyM(view.Get()));
}

static bool Camera3D::ToScreen(float pos[], float size) {
  Vec4 t;
  t.Set(viewProj.NewMultiplyV(pos));
  if (t.w <= 0.0)
    return false;
  int spos[] = t.Get2D();
  int ssize = FloatToInt(size * focalLength / t.w, eRoundNearest);
  int srot = FloatToInt(Maths.RadiansToDegrees(camera_roll), eRoundNearest);
  if (srot < 0) srot += 360;
  scr_pos.pos[0] = spos[0];
  scr_pos.pos[1] = spos[1];
  scr_pos.size = ssize;
  scr_pos.rot = srot;
  return true;
}
