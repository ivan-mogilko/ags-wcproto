//-----------------------------------------------------------------------------
//
// Matrix44 and Vector4 module, originally written by Khris.
// Implementation is based on OpenGL tutorial:
// http://www.opengl-tutorial.org/beginners-tutorials/tutorial-3-matrices/
//
//-----------------------------------------------------------------------------

float[] Cross(float a[], float b[]) {
  float r[] = new float[4];
  r[0] = a[1] * b[2] - a[2] * b[1];
  r[1] = a[2] * b[0] - a[0] * b[2];
  r[2] = a[0] * b[1] - a[1] * b[0];
  r[3] = 0.0;
  return r;
}

float[] CrossSix(float a0, float a1, float a2, float b0, float b1, float b2) {
  float r[] = new float[4];
  r[0] = a1 * b2 - a2 * b1;
  r[1] = a2 * b0 - a0 * b2;
  r[2] = a0 * b1 - a1 * b0;
  r[3] = 0.0;
  return r;
}

float[] Matrix::Get() {
  float r[] = new float[16];
  for (int i = 0; i < 16; i++) r[i] = this.c[i];
  return r;
}

void Matrix::Set(float c[]) {
  for (int i = 0; i < 16; i++) this.c[i] = c[i];
}

void Matrix::Identity() {
  this.c[ 0] = 1.0; this.c[ 1] = 0.0; this.c[ 2] = 0.0; this.c[ 3] = 0.0;
  this.c[ 4] = 0.0; this.c[ 5] = 1.0; this.c[ 6] = 0.0; this.c[ 7] = 0.0;
  this.c[ 8] = 0.0; this.c[ 9] = 0.0; this.c[10] = 1.0; this.c[11] = 0.0;
  this.c[12] = 0.0; this.c[13] = 0.0; this.c[14] = 0.0; this.c[15] = 1.0;
}

void Matrix::Translate(float x, float y, float z) {
  this.c[ 0] = 1.0; this.c[ 1] = 0.0; this.c[ 2] = 0.0; this.c[ 3] = x;
  this.c[ 4] = 0.0; this.c[ 5] = 1.0; this.c[ 6] = 0.0; this.c[ 7] = y;
  this.c[ 8] = 0.0; this.c[ 9] = 0.0; this.c[10] = 1.0; this.c[11] = z;
  this.c[12] = 0.0; this.c[13] = 0.0; this.c[14] = 0.0; this.c[15] = 1.0;
}

void Matrix::RotateX(float a) {
  float c = Maths.Cos(a);
  float s = Maths.Sin(a);
  this.c[ 0] = 1.0; this.c[ 1] = 0.0; this.c[ 2] = 0.0; this.c[ 3] = 0.0;
  this.c[ 4] = 0.0; this.c[ 5] =   c; this.c[ 6] =  -s; this.c[ 7] = 0.0;
  this.c[ 8] = 0.0; this.c[ 9] =   s; this.c[10] =   c; this.c[11] = 0.0;
  this.c[12] = 0.0; this.c[13] = 0.0; this.c[14] = 0.0; this.c[15] = 1.0;
}

void Matrix::RotateY(float a) {
  float c = Maths.Cos(a);
  float s = Maths.Sin(a);
  this.c[ 0] =   c; this.c[ 1] = 0.0; this.c[ 2] =   s; this.c[ 3] = 0.0;
  this.c[ 4] = 0.0; this.c[ 5] = 1.0; this.c[ 6] = 0.0; this.c[ 7] = 0.0;
  this.c[ 8] =  -s; this.c[ 9] = 0.0; this.c[10] =   c; this.c[11] = 0.0;
  this.c[12] = 0.0; this.c[13] = 0.0; this.c[14] = 0.0; this.c[15] = 1.0;
}

void Matrix::RotateZ(float a) {
  float c = Maths.Cos(a);
  float s = Maths.Sin(a);
  this.c[ 0] =   c; this.c[ 1] =  -s; this.c[ 2] = 0.0; this.c[ 3] = 0.0;
  this.c[ 4] =   s; this.c[ 5] =   c; this.c[ 6] = 0.0; this.c[ 7] = 0.0;
  this.c[ 8] = 0.0; this.c[ 9] = 0.0; this.c[10] = 1.0; this.c[11] = 0.0;
  this.c[12] = 0.0; this.c[13] = 0.0; this.c[14] = 0.0; this.c[15] = 1.0;
}

void Matrix::InverseRot() {
  float sw;
  sw = this.c[1]; this.c[1] = this.c[4]; this.c[4] = sw;
  sw = this.c[8]; this.c[8] = this.c[2]; this.c[2] = sw;
  sw = this.c[9]; this.c[9] = this.c[6]; this.c[6] = sw;
}

void Matrix::Quaternion(float angle, float b, float c, float d) {
  float a = Maths.Cos(angle / 2.0);
  float s = Maths.Sin(angle / 2.0);
  b *= s;
  c *= s;
  d *= s;
  this.c[ 0] = a*a+b*b-c*c-d*d; this.c[ 1] =   2.0*(b*c-a*d); this.c[ 2] =   2.0*(b*d+a*c); this.c[ 3] = 0.0;
  this.c[ 4] =   2.0*(b*c+a*d); this.c[ 5] = a*a-b*b+c*c-d*d; this.c[ 6] =   2.0*(c*d-a*b); this.c[ 7] = 0.0;
  this.c[ 8] =   2.0*(b*d-a*c); this.c[ 9] =   2.0*(c*d+a*b); this.c[10] = a*a-b*b-c*c+d*d; this.c[11] = 0.0;
  this.c[12] =             0.0; this.c[13] =             0.0; this.c[14] =             0.0; this.c[15] = 1.0;
}  

void Matrix::createFromDirUp(float z[], float y[]) {
  float x[] = Cross(y, z);
  float l = Maths.Sqrt(x[0] * x[0] + x[1] * x[1] + x[2] * x[2]);
  x[0] /= l;
  x[1] /= l;
  x[2] /= l;
  this.c[ 0] = x[0]; this.c[ 1] = y[0]; this.c[ 2] = z[0]; this.c[ 3] = 0.0;
  this.c[ 4] = x[1]; this.c[ 5] = y[1]; this.c[ 6] = z[1]; this.c[ 7] = 0.0;
  this.c[ 8] = x[2]; this.c[ 9] = y[2]; this.c[10] = z[2]; this.c[11] = 0.0;
  this.c[12] =  0.0; this.c[13] =  0.0; this.c[14] =  0.0; this.c[15] = 1.0;
}

void Matrix::Perspective(float f, float aspect, float zNear, float zFar) {
  this.c[0] = f / aspect;
  this.c[5] = f;
  this.c[10] = (zFar + zNear) / (zNear - zFar);
  this.c[11] = (2.0 * zFar * zNear) / (zNear - zFar);
  this.c[14] = 1.0;
}

float[] Matrix::NewMultiplyV(float v[]) {
  float r[] = new float[4];
  r[0] = this.c[ 0] * v[0] + this.c[ 1] * v[1] + this.c[ 2] * v[2] + this.c[ 3] * v[3];
  r[1] = this.c[ 4] * v[0] + this.c[ 5] * v[1] + this.c[ 6] * v[2] + this.c[ 7] * v[3];
  r[2] = this.c[ 8] * v[0] + this.c[ 9] * v[1] + this.c[10] * v[2] + this.c[11] * v[3];
  r[3] = this.c[12] * v[0] + this.c[13] * v[1] + this.c[14] * v[2] + this.c[15] * v[3];
  return r;
}

float[] Matrix::NewMultiplyM(float v[]) {
  float r[] = new float[16];
  r[ 0] = this.c[ 0] * v[ 0] + this.c[ 1] * v[ 4] + this.c[ 2] * v[ 8] + this.c[ 3] * v[ 12];
  r[ 1] = this.c[ 0] * v[ 1] + this.c[ 1] * v[ 5] + this.c[ 2] * v[ 9] + this.c[ 3] * v[ 13];
  r[ 2] = this.c[ 0] * v[ 2] + this.c[ 1] * v[ 6] + this.c[ 2] * v[10] + this.c[ 3] * v[ 14];
  r[ 3] = this.c[ 0] * v[ 3] + this.c[ 1] * v[ 7] + this.c[ 2] * v[11] + this.c[ 3] * v[ 15];
  r[ 4] = this.c[ 4] * v[ 0] + this.c[ 5] * v[ 4] + this.c[ 6] * v[ 8] + this.c[ 7] * v[ 12];
  r[ 5] = this.c[ 4] * v[ 1] + this.c[ 5] * v[ 5] + this.c[ 6] * v[ 9] + this.c[ 7] * v[ 13];
  r[ 6] = this.c[ 4] * v[ 2] + this.c[ 5] * v[ 6] + this.c[ 6] * v[10] + this.c[ 7] * v[ 14];
  r[ 7] = this.c[ 4] * v[ 3] + this.c[ 5] * v[ 7] + this.c[ 6] * v[11] + this.c[ 7] * v[ 15];
  r[ 8] = this.c[ 8] * v[ 0] + this.c[ 9] * v[ 4] + this.c[10] * v[ 8] + this.c[11] * v[ 12];
  r[ 9] = this.c[ 8] * v[ 1] + this.c[ 9] * v[ 5] + this.c[10] * v[ 9] + this.c[11] * v[ 13];
  r[10] = this.c[ 8] * v[ 2] + this.c[ 9] * v[ 6] + this.c[10] * v[10] + this.c[11] * v[ 14];
  r[11] = this.c[ 8] * v[ 3] + this.c[ 9] * v[ 7] + this.c[10] * v[11] + this.c[11] * v[ 15];
  r[12] = this.c[12] * v[ 0] + this.c[13] * v[ 4] + this.c[14] * v[ 8] + this.c[15] * v[ 12];
  r[13] = this.c[12] * v[ 1] + this.c[13] * v[ 5] + this.c[14] * v[ 9] + this.c[15] * v[ 13];
  r[14] = this.c[12] * v[ 2] + this.c[13] * v[ 6] + this.c[14] * v[10] + this.c[15] * v[ 14];
  r[15] = this.c[12] * v[ 3] + this.c[13] * v[ 7] + this.c[14] * v[11] + this.c[15] * v[ 15];
  return r;
}

void Matrix::CreateFromUnity(float x[], float y[], float z[]) {
  this.c[ 0] = x[0]; this.c[ 1] = y[0]; this.c[ 2] = z[0]; this.c[ 3] = 0.0;
  this.c[ 4] = x[1]; this.c[ 5] = y[1]; this.c[ 6] = z[1]; this.c[ 7] = 0.0;
  this.c[ 8] = x[2]; this.c[ 9] = y[2]; this.c[10] = z[2]; this.c[11] = 0.0;
  this.c[12] =  0.0; this.c[13] =  0.0; this.c[14] =  0.0; this.c[15] = 1.0;
}

String Matrix::ToString() {
  String r = String.Format("%3.2f %3.2f %3.2f %3.2f", this.c[ 0], this.c[ 1], this.c[ 2], this.c[ 3]);
  r = String.Format("%s[%3.2f %3.2f %3.2f %3.2f", r, this.c[ 4], this.c[ 5], this.c[ 6], this.c[ 7]);
  r = String.Format("%s[%3.2f %3.2f %3.2f %3.2f", r, this.c[ 8], this.c[ 9], this.c[10], this.c[11]);
  r = String.Format("%s[%3.2f %3.2f %3.2f %3.2f",  r, this.c[12], this.c[13], this.c[14], this.c[15]);
  return r;
}

bool Vec4::IsZero() {
  return this.x >= -TINY_FLOAT && this.x <= TINY_FLOAT &&
         this.y >= -TINY_FLOAT && this.y <= TINY_FLOAT &&
         this.z >= -TINY_FLOAT && this.z <= TINY_FLOAT;
}

float Vec4::Length() {
  return Maths.Sqrt(this.x * this.x + this.y * this.y + this.z * this.z);  
}

void Vec4::Normalize() {
  float l = this.Length();
  this.x /= l;
  this.y /= l;
  this.z /= l;
}

float[] Vec4::Get() {
  float r[] = new float[4];
  r[0] = this.x; r[1] = this.y; r[2] = this.z; r[3] = this.w;
  return r;
}

int[] Vec4::Get2D() {
  int r[] = new int[2];
  if (this.w == 0.0) return r;
  // TODO: replace viewport width with custom surface size!
  // this may require to move this function out of the Vec4 into 3D camera/viewport module
  r[0] = System.ViewportWidth / 2 + FloatToInt(this.x / this.w, eRoundNearest);
  r[1] = System.ViewportHeight / 2 - FloatToInt(this.y / this.w, eRoundNearest);
  return r;
}

void Vec4::Set(float c[]) {
  this.x = c[0]; this.y = c[1]; this.z = c[2]; this.w = c[3];
}

void Vec4::SetXYZ(float x, float y, float z) {
  this.x = x;
  this.y = y;
  this.z = z;
}

void Vec4::SetXYZW(float x, float y, float z, float w) {
  this.SetXYZ(x, y, z);  
  this.w = w;
}

void Vec4::Add(float x, float y, float z) {
  this.x += x;
  this.y += y;
  this.z += z;
}

void Vec4::Scale(float f) {
  this.x *= f;
  this.y *= f;
  this.z *= f;
}

void Vec4::Cross(float a[], float b[]) {
  this.Set(Cross(a, b));
}

String Vec4::ToString() {
  return String.Format("%3.2f %3.2f %3.2f %3.2f", this.x, this.y, this.z, this.w);
}