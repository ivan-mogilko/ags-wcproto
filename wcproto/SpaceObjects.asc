//-----------------------------------------------------------------------------
//
// Module handles creation, update and drawing of space objects.
//
//-----------------------------------------------------------------------------

#define SPRITE_PLANET 2

#define POINTS 500
#define POINTS_SIZE 20000

Vec4 point[POINTS];

DynamicSprite *planet;

// move point infront of ship
void movePoint(int i) {
  float x = rnd(POINTS_SIZE);
  float y = rnd(POINTS_SIZE);
  float z = rnd(POINTS_SIZE) + IntToFloat(POINTS_SIZE * 2);
  point[i].SetXYZ(
    cam_pos.x + cam_right.x * x + cam_up.x * y + cam_dir.x * z,
    cam_pos.y + cam_right.y * x + cam_up.y * y + cam_dir.y * z,
    cam_pos.z + cam_right.z * x + cam_up.y * y + cam_dir.z * z
  );
}

static void SpaceObjects::Init() {
  for (int i = 0; i < POINTS; i++) {
    point[i].SetXYZW(rnd(POINTS_SIZE), rnd(POINTS_SIZE), rnd(POINTS_SIZE), 1.0);
  }
}

static void SpaceObjects::DrawAll(DrawingSurface *ds) {
  point[POINTS - 1].z = 500000.0;
  
  // draw stuff
  Vec4 t;
  int co[];
  float size = 10.0;
  ds.DrawingColor = 31;
  for (int i = 0; i < POINTS; i++) {
    t.Set(viewProj.NewMultiplyV(point[i].Get()));
    if (t.w > 0.0) {
      co = t.Get2D();
      ds.DrawPixel(co[0], co[1]);
      if (i == POINTS - 1) {
        int si = FloatToInt(10000.0 * focalLength / t.w, eRoundNearest);
        if (si <= SX * 3) {
          int a = FloatToInt(Maths.RadiansToDegrees(totalRoll), eRoundNearest);
          if (a < 0) a += 360;
          planet = DynamicSprite.CreateFromExistingSprite(SPRITE_PLANET, true);
          planet.Resize(si * 2, si * 2);
          if (a > 0 && a < 360) planet.Rotate(a);
          si = planet.Width / 2;
          ds.DrawImage(co[0] - si, co[1] - si, planet.Graphic, 0);
        }
      }
      else {
        int rad = FloatToInt(focalLength * size / t.w, eRoundNearest);
        if (rad >= 1) ds.DrawCircle(co[0], co[1], rad);
        else ds.DrawPixel(co[0], co[1]);
      }
    }
    else if (i < POINTS - 1) movePoint(i);
  }
}
