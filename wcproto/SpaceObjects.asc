//-----------------------------------------------------------------------------
//
// Module handles creation, update and drawing of space objects.
//
//-----------------------------------------------------------------------------

/////////////////////////////////////
// Space objects array
// TODO: maybe find a way to merge matching properties from objects and particles;
// in that case we will have to use multiple array indices per entity though.
/////////////////////////////////////
// TODO: remake Matrix and Vec4 to work with raw float arrays instead of structs?
// Find a way to pack this into the struct (as managed arrays perhaps??)
Vec4 SO_point[MAX_SPACE_OBJECTS];
float SO_size[MAX_SPACE_OBJECTS];
Vec4 SO_vel[MAX_SPACE_OBJECTS];
Vec4 SO_dir[MAX_SPACE_OBJECTS];
// TODO: maybe replace "up" and "right" vectors with simplier value meaning rotation around "dir"?
// and calculate necessary vectors from "dir" and that value.
Vec4 SO_up[MAX_SPACE_OBJECTS];
Vec4 SO_right[MAX_SPACE_OBJECTS];
Vec4 SO_angvel[MAX_SPACE_OBJECTS];
int SO_sprite[MAX_SPACE_OBJECTS];
int SO_count;

export SO_point, SO_vel, SO_dir, SO_up, SO_right, SO_angvel;

/////////////////////////////////////
// Space particles array
/////////////////////////////////////
Vec4 SP_point[MAX_PARTICLES];
float SP_size[MAX_PARTICLES];
int SP_color[MAX_PARTICLES];
int SP_count;

/////////////////////////////////////
// Particles behavior
/////////////////////////////////////
int SpaceDust_spawnRange;
int SpaceDust_minSize;
int SpaceDust_maxSize;
int SpaceDust_greyColor1;
int SpaceDust_greyColor2;


// move point infront of ship
void respawnSpaceDust(int i) {
  float x = rnd(SpaceDust_spawnRange);
  float y = rnd(SpaceDust_spawnRange);
  float z = rnd(SpaceDust_spawnRange) + IntToFloat(SpaceDust_spawnRange * 2);
  SP_point[i].SetXYZ(
    cam_pos.x + cam_right.x * x + cam_up.x * y + cam_dir.x * z,
    cam_pos.y + cam_right.y * x + cam_up.y * y + cam_dir.y * z,
    cam_pos.z + cam_right.z * x + cam_up.y * y + cam_dir.z * z
  );
  SP_size[i] = rnd2(SpaceDust_minSize, SpaceDust_maxSize);
  int col = rndi2(SpaceDust_greyColor1, SpaceDust_greyColor2);
  SP_color[i] = Game.GetColorFromRGB(col, col, col);
}

static void SpaceObjects::RemoveAllObjects() {
  SO_count = 0;
}

static int SpaceObjects::AddObject(float x, float y, float z, float size, int sprite) {
  if (SO_count == MAX_SPACE_OBJECTS)
    return -1;
  SO_point[SO_count].SetXYZW(x, y, z, 1.0);
  SO_size[SO_count] = size;
  SO_vel[SO_count].SetXYZW(0.0, 0.0, 0.0, 0.0);
  SO_dir[SO_count].SetXYZW(0.0, 0.0, 1.0, 0.0);
  SO_up[SO_count].SetXYZW(0.0, 1.0, 0.0, 0.0);
  SO_right[SO_count].SetXYZW(1.0, 0.0, 0.0, 0.0);
  SO_sprite[SO_count] = sprite;
  SO_count++;
  return SO_count - 1;
}

static int SpaceObjects::SetupSpaceDust(int max_count, int spawn_range, int min_size, int max_size, int grey_color1, int grey_color2)
{
  max_count = maxi(max_count, MAX_PARTICLES);
  SP_count = max_count;
  SpaceDust_spawnRange = spawn_range;
  SpaceDust_minSize = min_size;
  SpaceDust_maxSize = max_size;
  SpaceDust_greyColor1 = grey_color1;
  SpaceDust_greyColor2 = grey_color2;
  
  for (int i = 0; i < max_count; i++) {
    SP_point[i].SetXYZW(rnd(spawn_range), rnd(spawn_range), rnd(spawn_range), 1.0);
    SP_size[i] = rnd2(min_size, max_size);
    int col = rndi2(SpaceDust_greyColor1, SpaceDust_greyColor2);
    SP_color[i] = Game.GetColorFromRGB(col, col, col);
  }
}

static void SpaceObjects::Init() {
}

static void SpaceObjects::DrawAll(DrawingSurface *ds) {
  ////////////////////////////////////////////////////////////////////
  // Draw space objects
  for (int i = 0; i < SO_count; i++) {
    int sprite = SO_sprite[i];
    float size = SO_size[i];
    if (sprite < 0 || size < TINY_FLOAT) continue; // skip invisible objects
    float pt[] = SO_point[i].Get();
    if (Camera3D.ToScreen(pt, size)) {
      if (scr_pos.size <= SX * 3) {
        // TODO: draw point with "faraway color" if screenSize is too small
        // TODO: cache transformed sprites when possible
        int x = scr_pos.pos[0];
        int y = scr_pos.pos[1];
        int sz = scr_pos.size;
        int rot = scr_pos.rot;
        
        DynamicSprite *spr = DynamicSprite.CreateFromExistingSprite(SO_sprite[i], true);
        spr.Resize(sz * 2, sz * 2);
        if (rot > 0 && rot < 360) spr.Rotate(rot);
        sz = spr.Width / 2;
        ds.DrawImage(x - sz, y - sz, spr.Graphic, 0);
      }
    }
  }
  
  ////////////////////////////////////////////////////////////////////
  // Draw particles
  for (int i = 0; i < SP_count; i++) {
    float pt[] = SP_point[i].Get();
    float size = SP_size[i];
    ds.DrawingColor = SP_color[i];
    if (Camera3D.ToScreen(pt, size)) {
      if (scr_pos.size >= 1) ds.DrawCircle(scr_pos.pos[0], scr_pos.pos[1], scr_pos.size);
      else ds.DrawPixel(scr_pos.pos[0], scr_pos.pos[1]);
    }
    else {
      respawnSpaceDust(i);
    }
  }
}

static void SpaceObjects::UpdateAll(float dt) {
  Vec4 rot;
  Matrix tmp;
  
  ////////////////////////////////////////////////////////////////////
  // Update space objects
  for (int i = 0; i < SO_count; i++) {
    // Change position by velocity
    if (!SO_vel[i].IsZero()) {
      SO_point[i].Add(SO_vel[i].x * dt, SO_vel[i].y * dt, SO_vel[i].z * dt);
    }
    // Change orientation by angular velocity
    if (!SO_angvel[i].IsZero()) {
      float yaw = SO_angvel[i].x;
      float pitch = SO_angvel[i].y;
      float roll = SO_angvel[i].z;
      bool yaw_is_zero = yaw >= -TINY_FLOAT && yaw <= TINY_FLOAT;
      bool pitch_is_zero = pitch >= -TINY_FLOAT && pitch <= TINY_FLOAT;
      // 1. Calculate rotation axis based on yaw and pitch
      float ys = 0.0;
      if (!yaw_is_zero) ys = 1.0 / yaw;
      float ps = 0.0;
      if (!pitch_is_zero) ps = 1.0 / pitch;
      rot.SetXYZW(
        SO_right[i].x * ys + SO_up[i].x * ps,
        SO_right[i].y * ys + SO_up[i].y * ps,
        SO_right[i].z * ys + SO_up[i].z * ps,
        0.0
      );
      
      // 2. If axis is valid, apply yaw/pitch rotation
      if (!rot.IsZero()) {
        rot.Normalize();
        float s = sgn(yaw * pitch);
        float a = Maths.Sqrt(yaw * yaw + pitch * pitch);
        if (s < -TINY_FLOAT || s > TINY_FLOAT) {
          a *= s; // both yaw and pitch are valid
        } else {
          if (!yaw_is_zero) { // only yaw
            rot.Set(SO_up[i].Get());
            a *= sgn(yaw);
          }
          else if (!pitch_is_zero) { // only pitch
            rot.Set(SO_right[i].Get());
            a *= sgn(pitch);
          }
        }
        // TODO: this value adjustment should not be here, but I cannot yet figure out
        // why removing it breaks rotation when cursor is too close to the center
        tmp.Quaternion((a * dt) / 10.0, rot.x, rot.y, rot.z);
        SO_dir[i].Set(tmp.NewMultiplyV(SO_dir[i].Get()));
        SO_up[i].Set(tmp.NewMultiplyV(SO_up[i].Get()));
        SO_right[i].Set(tmp.NewMultiplyV(SO_right[i].Get()));
      }
      if (roll < -TINY_FLOAT || roll > TINY_FLOAT) {
        tmp.Quaternion((roll * dt), SO_dir[i].x, SO_dir[i].y, SO_dir[i].z);
        SO_up[i].Set(tmp.NewMultiplyV(SO_up[i].Get()));
        SO_right[i].Set(tmp.NewMultiplyV(SO_right[i].Get()));
      }
    }
  }
}
