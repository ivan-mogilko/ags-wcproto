//-----------------------------------------------------------------------------
//
// Module handles creation, update and drawing of space objects.
//
//-----------------------------------------------------------------------------

#define SPRITE_PLANET 2

#define MAX_SPACE_OBJECTS 100
#define MAX_PARTICLES     1000

#define MAX_SPACE_DUST 500
#define SPACE_DUST_SPAWN_RANGE 20000

/////////////////////////////////////
// Space objects array
/////////////////////////////////////
// TODO: remake Matrix and Vec4 to work with raw float arrays instead of structs?
// Find a way to pack this into the struct (as managed arrays perhaps??)
Vec4 SO_point[MAX_SPACE_OBJECTS];
float SO_size[MAX_SPACE_OBJECTS];
int SO_sprite[MAX_SPACE_OBJECTS];
int SO_count;

/////////////////////////////////////
// Space particles array
/////////////////////////////////////
Vec4 SP_point[MAX_PARTICLES];
float SP_size = 10.0;
int SP_color = 31;
int SP_count;

// move point infront of ship
void movePoint(int i) {
  float x = rnd(SPACE_DUST_SPAWN_RANGE);
  float y = rnd(SPACE_DUST_SPAWN_RANGE);
  float z = rnd(SPACE_DUST_SPAWN_RANGE) + IntToFloat(SPACE_DUST_SPAWN_RANGE * 2);
  SP_point[i].SetXYZ(
    cam_pos.x + cam_right.x * x + cam_up.x * y + cam_dir.x * z,
    cam_pos.y + cam_right.y * x + cam_up.y * y + cam_dir.y * z,
    cam_pos.z + cam_right.z * x + cam_up.y * y + cam_dir.z * z
  );
}

static void SpaceObjects::Init() {
  // Space dust
  SP_count = MAX_SPACE_DUST;
  for (int i = 0; i < MAX_SPACE_DUST; i++) {
    SP_point[i].SetXYZW(rnd(SPACE_DUST_SPAWN_RANGE), rnd(SPACE_DUST_SPAWN_RANGE), rnd(SPACE_DUST_SPAWN_RANGE), 1.0);
  }
  
  // A planet
  SO_count = 1;
  SO_point[0].SetXYZW(0.0, 0.0, 500000.0, 1.0);
  SO_size[0] = 10000.0;
  SO_sprite[0] = SPRITE_PLANET;
}

static void SpaceObjects::DrawAll(DrawingSurface *ds) {
  ////////////////////////////////////////////////////////////////////
  // Draw space objects
  ds.DrawingColor = SP_color;
  for (int i = 0; i < SO_count; i++) {
    float pt[] = SO_point[i].Get();
    float size = SO_size[i];
    if (Camera3D.ToScreen(pt, size)) {
      if (screenSize <= SX * 3) {
        // TODO: cache transformed sprites when possible
        DynamicSprite *spr = DynamicSprite.CreateFromExistingSprite(SO_sprite[i], true);
        spr.Resize(screenSize * 2, screenSize * 2);
        if (screenRot > 0 && screenRot < 360) spr.Rotate(screenRot);
        screenSize = spr.Width / 2;
        ds.DrawImage(screenPos[0] - screenSize, screenPos[1] - screenSize, spr.Graphic, 0);
      }
    }
  }
  
  ////////////////////////////////////////////////////////////////////
  // Draw particles
  ds.DrawingColor = SP_color;
  for (int i = 0; i < SP_count; i++) {
    float pt[] = SP_point[i].Get();
    float size = SP_size;
    if (Camera3D.ToScreen(pt, size)) {
      if (screenSize >= 1) ds.DrawCircle(screenPos[0], screenPos[1], screenSize);
      else ds.DrawPixel(screenPos[0], screenPos[1]);
    }
    else {
      movePoint(i);
    }
  }
}
